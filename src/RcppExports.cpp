// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// solve_betas
arma::mat solve_betas(const arma::mat& design_full, const arma::mat& lambda_mat, const arma::mat& Ynorm);
RcppExport SEXP _crescendo_solve_betas(SEXP design_fullSEXP, SEXP lambda_matSEXP, SEXP YnormSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design_full(design_fullSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda_mat(lambda_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ynorm(YnormSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_betas(design_full, lambda_mat, Ynorm));
    return rcpp_result_gen;
END_RCPP
}
// merge_redundant_clusters
arma::mat merge_redundant_clusters(const arma::mat& R, float thresh);
RcppExport SEXP _crescendo_merge_redundant_clusters(SEXP RSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< float >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_redundant_clusters(R, thresh));
    return rcpp_result_gen;
END_RCPP
}
// solve_mu1
arma::mat solve_mu1(const arma::sp_mat& design_full, const arma::mat& betas);
RcppExport SEXP _crescendo_solve_mu1(SEXP design_fullSEXP, SEXP betasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type design_full(design_fullSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type betas(betasSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_mu1(design_full, betas));
    return rcpp_result_gen;
END_RCPP
}
// solve_mu2
void solve_mu2(arma::mat& expected_logcounts_marginalized, const arma::mat& R, const arma::mat& sigmas, const arma::mat& mu);
RcppExport SEXP _crescendo_solve_mu2(SEXP expected_logcounts_marginalizedSEXP, SEXP RSEXP, SEXP sigmasSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type expected_logcounts_marginalized(expected_logcounts_marginalizedSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    solve_mu2(expected_logcounts_marginalized, R, sigmas, mu);
    return R_NilValue;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _crescendo_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// draw_sample_cdf
int draw_sample_cdf(const float qmin, const float qmax, const float mu);
RcppExport SEXP _crescendo_draw_sample_cdf(SEXP qminSEXP, SEXP qmaxSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const float >::type qmin(qminSEXP);
    Rcpp::traits::input_parameter< const float >::type qmax(qmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_sample_cdf(qmin, qmax, mu));
    return rcpp_result_gen;
END_RCPP
}
// icdfpois_scalar
int icdfpois_scalar(const int k, const float mu_source, const float mu_target);
RcppExport SEXP _crescendo_icdfpois_scalar(SEXP kSEXP, SEXP mu_sourceSEXP, SEXP mu_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const float >::type mu_source(mu_sourceSEXP);
    Rcpp::traits::input_parameter< const float >::type mu_target(mu_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(icdfpois_scalar(k, mu_source, mu_target));
    return rcpp_result_gen;
END_RCPP
}
// parallelicdfPoisson
IntegerMatrix parallelicdfPoisson(IntegerMatrix k, NumericMatrix mu_source, NumericMatrix mu_target);
RcppExport SEXP _crescendo_parallelicdfPoisson(SEXP kSEXP, SEXP mu_sourceSEXP, SEXP mu_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_source(mu_sourceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mu_target(mu_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelicdfPoisson(k, mu_source, mu_target));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_crescendo_solve_betas", (DL_FUNC) &_crescendo_solve_betas, 3},
    {"_crescendo_merge_redundant_clusters", (DL_FUNC) &_crescendo_merge_redundant_clusters, 2},
    {"_crescendo_solve_mu1", (DL_FUNC) &_crescendo_solve_mu1, 2},
    {"_crescendo_solve_mu2", (DL_FUNC) &_crescendo_solve_mu2, 4},
    {"_crescendo_set_seed", (DL_FUNC) &_crescendo_set_seed, 1},
    {"_crescendo_draw_sample_cdf", (DL_FUNC) &_crescendo_draw_sample_cdf, 3},
    {"_crescendo_icdfpois_scalar", (DL_FUNC) &_crescendo_icdfpois_scalar, 3},
    {"_crescendo_parallelicdfPoisson", (DL_FUNC) &_crescendo_parallelicdfPoisson, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_crescendo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
